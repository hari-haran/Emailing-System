'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require('path');
const debug = require('debug')('email-templates');
const fs = require('fs-extra');
const htmlToText = require('html-to-text');
const I18N = require('@ladjs/i18n');
const autoBind = require('auto-bind');
const nodemailer = require('nodemailer');
const consolidate = require('consolidate');
const previewEmail = require('preview-email');
const _ = require('lodash');
const Promise = require('bluebird');

const getPaths = require('get-paths');
const juiceResources = require('juice-resources-promise');

const env = process.env.NODE_ENV || 'development';

class Email {
  constructor(config = {}) {
    debug('config passed %O', config);

    // 2.x backwards compatible support
    if (config.juiceOptions) {
      config.juiceResources = config.juiceOptions;
      delete config.juiceOptions;
    }
    if (config.disableJuice) {
      config.juice = false;
      delete config.disableJuice;
    }

    this.config = _.merge({
      views: {
        // directory where email templates reside
        root: path.resolve('emails'),
        options: {
          // default file extension for template
          extension: 'pug',
          map: {
            hbs: 'handlebars'
          },
          engineSource: consolidate
        },
        // locals to pass to templates for rendering
        locals: {
          // pretty is automatically set to `false` for subject/text
          pretty: true
        }
      },
      // <https://nodemailer.com/message/>
      message: {},
      send: !['development', 'test'].includes(env),
      preview: env === 'development',
      // <https://github.com/ladjs/i18n>
      // set to an object to configure and enable it
      i18n: false,
      // pass a custom render function if necessary
      render: this.render.bind(this),
      // force text-only rendering of template (disregards template folder)
      textOnly: false,
      // <https://github.com/werk85/node-html-to-text>
      htmlToText: {
        ignoreImage: true
      },
      // <https://github.com/Automattic/juice>
      juice: true,
      juiceResources: {
        preserveImportant: true,
        webResources: {
          relativeTo: path.resolve('build')
        }
      },
      // pass a transport configuration object or a transport instance
      // (e.g. an instance is created via `nodemailer.createTransport`)
      // <https://nodemailer.com/transports/>
      transport: {}
    }, config);

    // override existing method
    this.render = this.config.render;

    if (!_.isFunction(this.config.transport.sendMail)) this.config.transport = nodemailer.createTransport(this.config.transport);

    debug('transformed config %O', this.config);

    autoBind(this);
  }

  // shorthand use of `juiceResources` with the config
  // (mainly for custom renders like from a database)
  juiceResources(html) {
    return juiceResources(html, this.config.juiceResources);
  }

  // a simple helper function that gets the actual file path for the template
  getTemplatePath(view) {
    var _this = this;

    return new Promise((() => {
      var _ref = _asyncToGenerator(function* (resolve, reject) {
        try {
          const paths = yield getPaths(_this.config.views.root, view, _this.config.views.options.extension);
          const filePath = path.resolve(_this.config.views.root, paths.rel);
          resolve({ filePath, paths });
        } catch (err) {
          reject(err);
        }
      });

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    })());
  }

  // returns true or false if a template exists
  // (uses same look-up approach as `render` function)
  templateExists(view) {
    var _this2 = this;

    return new Promise((() => {
      var _ref2 = _asyncToGenerator(function* (resolve) {
        try {
          var _ref3 = yield _this2.getTemplatePath(view);

          const filePath = _ref3.filePath;

          const stats = yield fs.stat(filePath);
          if (!stats.isFile()) throw new Error(`${filePath} was not a file`);
          resolve(true);
        } catch (err) {
          debug('templateExists', err);
          resolve(false);
        }
      });

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    })());
  }

  // promise version of consolidate's render
  // inspired by koa-views and re-uses the same config
  // <https://github.com/queckezz/koa-views>
  render(view, locals = {}) {
    var _this3 = this;

    return new Promise((() => {
      var _ref4 = _asyncToGenerator(function* (resolve, reject) {
        try {
          var _config$views$options = _this3.config.views.options;
          const map = _config$views$options.map,
                engineSource = _config$views$options.engineSource;

          var _ref5 = yield _this3.getTemplatePath(view);

          const filePath = _ref5.filePath,
                paths = _ref5.paths;

          if (paths.ext === 'html' && !map) {
            const res = yield fs.readFile(filePath, 'utf8');
            resolve(res);
          } else {
            const engineName = map && map[paths.ext] ? map[paths.ext] : paths.ext;
            const renderFn = engineSource[engineName];
            if (!engineName || !renderFn) return reject(new Error(`Engine not found for the ".${paths.ext}" file extension`));

            if (_.isObject(_this3.config.i18n)) {
              const i18n = new I18N(Object.assign({}, _this3.config.i18n, {
                register: locals
              }));

              // support `locals.user.last_locale`
              // (e.g. for <https://lad.js.org>)
              if (_.isObject(locals.user) && _.isString(locals.user.last_locale)) locals.locale = locals.user.last_locale;

              if (_.isString(locals.locale)) i18n.setLocale(locals.locale);
            }

            // TODO: convert this to a promise based version
            renderFn(filePath, locals, function (err, res) {
              if (err) return reject(err);
              // transform the html with juice using remote paths
              // google now supports media queries
              // https://developers.google.com/gmail/design/reference/supported_css
              if (!_this3.config.juice) return resolve(res);
              _this3.juiceResources(res).then(resolve).catch(reject);
            });
          }
        } catch (err) {
          reject(err);
        }
      });

      return function (_x4, _x5) {
        return _ref4.apply(this, arguments);
      };
    })());
  }

  renderAll(template, locals = {}, message = {}) {
    var _this4 = this;

    return new Promise((() => {
      var _ref6 = _asyncToGenerator(function* (resolve, reject) {
        try {
          let subjectTemplateExists = false;
          let htmlTemplateExists = false;
          let textTemplateExists = false;

          const promises = [_this4.templateExists(`${template}/subject`), _this4.templateExists(`${template}/html`), _this4.templateExists(`${template}/text`)];

          if (template) {
            ;

            var _ref7 = yield Promise.all(promises);

            var _ref8 = _slicedToArray(_ref7, 3);

            subjectTemplateExists = _ref8[0];
            htmlTemplateExists = _ref8[1];
            textTemplateExists = _ref8[2];
          }if (!message.subject && subjectTemplateExists) {
            message.subject = yield _this4.render(`${template}/subject`, Object.assign({}, locals, { pretty: false }));
            message.subject = message.subject.trim();
          }

          if (!message.html && htmlTemplateExists) message.html = yield _this4.render(`${template}/html`, locals);

          if (!message.text && textTemplateExists) message.text = yield _this4.render(`${template}/text`, Object.assign({}, locals, { pretty: false }));

          if (_this4.config.htmlToText && message.html && !message.text)
            // we'd use nodemailer-html-to-text plugin
            // but we really don't need to support cid
            // <https://github.com/andris9/nodemailer-html-to-text>
            message.text = htmlToText.fromString(message.html, _this4.config.htmlToText);

          // if we only want a text-based version of the email
          if (_this4.config.textOnly) delete message.html;

          resolve(message);
        } catch (err) {
          reject(err);
        }
      });

      return function (_x6, _x7) {
        return _ref6.apply(this, arguments);
      };
    })());
  }

  send(options = {}) {
    var _this5 = this;

    options = Object.assign({
      template: '',
      message: {},
      locals: {}
    }, options);

    var _options = options;
    let template = _options.template,
        message = _options.message,
        locals = _options.locals;


    const attachments = message.attachments || this.config.message.attachments || [];

    message = _.defaultsDeep({}, _.omit(this.config.message, 'attachments'), _.omit(message, 'attachments'));
    locals = _.defaultsDeep({}, this.config.views.locals, locals);

    if (attachments) message.attachments = attachments;

    debug('template %s', template);
    debug('message %O', message);
    debug('locals (keys only): %O', Object.keys(locals));

    return new Promise((() => {
      var _ref9 = _asyncToGenerator(function* (resolve, reject) {
        try {
          // get all available templates
          const obj = yield _this5.renderAll(template, locals, message);

          // assign the object variables over to the message
          Object.assign(message, obj);

          if (_this5.config.preview) {
            debug('using `preview-email` to preview email');
            yield previewEmail(message);
          }

          if (!_this5.config.send) {
            debug('send disabled so we are ensuring JSONTransport');
            // <https://github.com/nodemailer/nodemailer/issues/798>
            // if (this.config.transport.name !== 'JSONTransport')
            _this5.config.transport = nodemailer.createTransport({
              jsonTransport: true
            });
          }

          const res = yield _this5.config.transport.sendMail(message);
          debug('message sent');
          resolve(res);
        } catch (err) {
          reject(err);
        }
      });

      return function (_x8, _x9) {
        return _ref9.apply(this, arguments);
      };
    })());
  }
}

module.exports = Email;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,